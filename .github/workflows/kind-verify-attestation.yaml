# Copyright 2022 The Sigstore Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Test attest / verify-attestation

on:
  pull_request:
    branches: [ 'main', 'release-*' ]
  workflow_dispatch:

defaults:
  run:
    shell: bash

permissions: {}

jobs:
  cip-test:
    name: attest / verify-attestation test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        k8s-version:
        - v1.30.x
        - v1.31.x
        - v1.32.x
        - v1.33.x
        tuf-root:
        - remote
        - air-gap

    permissions:
      contents: read

    env:
      KO_DOCKER_REPO: "registry.local:5000/policy-controller"
      SCAFFOLDING_RELEASE_VERSION: "v0.7.24"
      GO111MODULE: on
      GOFLAGS: -ldflags=-s -ldflags=-w
      KOCACHE: ~/ko
      COSIGN_YES: "true"

    steps:
    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        persist-credentials: false

    - name: Extract version of Go to use
      run: echo "GOVERSION=$(awk -F'[:@]' '/FROM golang/{print $2; exit}' Dockerfile)" >> $GITHUB_ENV

    - uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
      with:
        go-version: '${{ env.GOVERSION }}'
        check-latest: true
        cache: false

    # will use the latest release available for ko
    - uses: ko-build/setup-ko@d006021bd0c28d1ce33a07e7943d48b079944c8d # v0.9

    - name: Install yq
      uses: mikefarah/yq@6251e95af8df3505def48c71f3119836701495d6 # v4.47.2

    - name: build cosign
      run: |
        make cosign

    - name: Install cluster + sigstore
      uses: sigstore/scaffolding/actions/setup@main
      with:
        legacy-variables: "false"
        k8s-version: ${{ matrix.k8s-version }}
        version: ${{ env.SCAFFOLDING_RELEASE_VERSION }}

    - name: Create sample image - demoimage
      run: |
        pushd $(mktemp -d)
        go mod init example.com/demo
        cat <<EOF > main.go
        package main
        import "fmt"
        func main() {
          fmt.Println("hello world")
        }
        EOF
        demoimage=`ko publish -B example.com/demo`
        echo "demoimage=$demoimage" >> $GITHUB_ENV
        echo Created image $demoimage
        popd

    - name: Initialize with our custom TUF root pointing to remote root
      if: ${{ matrix.tuf-root == 'remote' }}
      run: |
        TUF_MIRROR=$(kubectl -n tuf-system get ksvc tuf -ojsonpath='{.status.url}')
        ./cosign initialize --mirror $TUF_MIRROR --root ./root.json

    - name: Get copy of TUF repository
      run: |
        # Grab the compressed repository for airgap testing.
        kubectl -n tuf-system get secrets tuf-root -ojsonpath='{.data.repository}'  | base64 -d > ./repository.tar.gz
        tar -zxvf ./repository.tar.gz

    - name: Initialize with custom TUF root pointing to local filesystem
      if: ${{ matrix.tuf-root == 'air-gap' }}
      run: |
        # Grab the compressed repository for airgap testing.
        PWD=$(pwd)
        ROOT=${PWD}/repository/1.root.json
        REPOSITORY=${PWD}/repository
        ./cosign initialize --root ${ROOT} --mirror file://${REPOSITORY}

    - name: Set trustedroot
      run: |
        trustedroot=$(find ./repository/targets -name "*.trusted_root.json")
        echo "trustedroot=$trustedroot" >> $GITHUB_ENV

    - name: Sign demoimage with cosign
      run: |
        ./cosign sign --rekor-url ${REKOR_URL} --fulcio-url ${FULCIO_URL} --yes --allow-insecure-registry ${demoimage} --identity-token ${OIDC_TOKEN}

    - name: Create attestation for it
      run: |
        echo -n 'foobar e2e test' > ./predicate-file
        ./cosign attest --predicate ./predicate-file --fulcio-url ${FULCIO_URL} --rekor-url ${REKOR_URL} --allow-insecure-registry --yes ${demoimage} --identity-token ${OIDC_TOKEN}

    - name: Sign a blob
      run: |
        ./cosign sign-blob README.md --fulcio-url ${FULCIO_URL} --rekor-url ${REKOR_URL} --bundle blob.sigstore.json --yes --identity-token ${OIDC_TOKEN}

    - name: Verify with cosign
      run: |
        ./cosign verify --trusted-root=${trustedroot} --allow-insecure-registry ${demoimage} --certificate-identity https://kubernetes.io/namespaces/default/serviceaccounts/default --certificate-oidc-issuer "https://kubernetes.default.svc.cluster.local"

    - name: Verify custom attestation with cosign, works
      run: |
        echo '::group:: test custom verify-attestation success'
        if ! ./cosign verify-attestation --trusted-root=${trustedroot} --certificate-identity https://kubernetes.io/namespaces/default/serviceaccounts/default --certificate-oidc-issuer "https://kubernetes.default.svc.cluster.local" --policy ./test/testdata/policies/cue-works.cue --rekor-url ${REKOR_URL} --allow-insecure-registry ${demoimage} ; then
          echo Failed to verify attestation with a valid policy
          exit 1
        else
          echo Successfully validated custom attestation with a valid policy
        fi
        echo '::endgroup::'

    - name: Verify custom attestation with cosign, fails
      run: |
        echo '::group:: test custom verify-attestation success'
        if ./cosign verify-attestation --trusted-root=${trustedroot} --policy ./test/testdata/policies/cue-fails.cue --rekor-url ${REKOR_URL} --allow-insecure-registry ${demoimage} --certificate-identity https://kubernetes.io/namespaces/default/serviceaccounts/default --certificate-oidc-issuer "https://kubernetes.default.svc.cluster.local" ; then
          echo custom verify-attestation succeeded with cue policy that should not work
          exit 1
        else
          echo Successfully failed a policy that should not work
        fi
        echo '::endgroup::'

    - name: Verify a blob
      run: |
        ./cosign verify-blob README.md --trusted-root=${trustedroot} --bundle blob.sigstore.json --certificate-identity https://kubernetes.io/namespaces/default/serviceaccounts/default --certificate-oidc-issuer "https://kubernetes.default.svc.cluster.local"

    - name: Collect diagnostics
      if: ${{ failure() }}
      uses: chainguard-dev/actions/kind-diag@de56c2728beb0a0f371bff2ce2ee4b8afee4b5e8 # v1.5.1

    - name: Create vuln attestation for it
      run: |
        ./cosign attest --predicate ./test/testdata/attestations/vuln-predicate.json --type vuln --fulcio-url ${FULCIO_URL} --rekor-url ${REKOR_URL} --allow-insecure-registry --yes ${demoimage} --identity-token ${OIDC_TOKEN}

    - name: Verify vuln attestation with cosign, works
      run: |
        echo '::group:: test vuln verify-attestation success'
        if ! ./cosign verify-attestation --trusted-root=${trustedroot} --type vuln --policy ./test/testdata/policies/cue-vuln-works.cue --allow-insecure-registry ${demoimage} --certificate-identity https://kubernetes.io/namespaces/default/serviceaccounts/default --certificate-oidc-issuer "https://kubernetes.default.svc.cluster.local" ; then
          echo Failed to verify attestation with a valid policy
          exit 1
        else
          echo Successfully validated vuln attestation with a valid policy
        fi
        echo '::endgroup::'

    - name: Verify vuln attestation with cosign, fails
      run: |
        echo '::group:: test vuln verify-attestation success'
        if ./cosign verify-attestation --trusted-root=${trustedroot} --type vuln --policy ./test/testdata/policies/cue-vuln-fails.cue --allow-insecure-registry ${demoimage} --certificate-identity https://kubernetes.io/namespaces/default/serviceaccounts/default --certificate-oidc-issuer "https://kubernetes.default.svc.cluster.local" ; then
          echo verify-attestation succeeded with cue policy that should not work
          exit 1
        else
          echo Successfully failed a policy that should not work
        fi
        echo '::endgroup::'
