# Copyright 2022 The Sigstore Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Test cosigned with ClusterImagePolicy

on:
  pull_request:
    branches: [ 'main', 'release-*' ]

defaults:
  run:
    shell: bash

permissions: read-all

jobs:
  cip-test:
    name: ClusterImagePolicy e2e tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        k8s-version:
        - v1.21.x
        - v1.22.x
        # Try without this one now, might have problems with job restartings
        # may require upstream changes.
        #- v1.23.x

    env:
      KNATIVE_VERSION: "1.1.0"
      KO_DOCKER_REPO: "registry.local:5000/cosigned"
      SCAFFOLDING_RELEASE_VERSION: "v0.2.2"
      GO111MODULE: on
      GOFLAGS: -ldflags=-s -ldflags=-w
      KOCACHE: ~/ko
      COSIGN_EXPERIMENTAL: true

    steps:
    - uses: actions/checkout@a12a3943b4bdde767164f792f33f40b04645d846 # v2.4.0
    - uses: actions/setup-go@f6164bd8c8acb4a71fb2791a8b6c4024ff038dab # v2.2.0
      with:
        go-version: '1.17.x'

    # will use the latest release available for ko
    - uses: imjasonh/setup-ko@2c3450ca27f6e6f2b02e72a40f2163c281a1f675 # v0.4

    - name: Install yq
      uses: mikefarah/yq@bc2118736bca883de2e2c345bb7f7ef52c994920 # v4.16.2

    - name: Setup mirror
      uses: chainguard-dev/actions/setup-mirror@main
      with:
        mirror: mirror.gcr.io

    - name: build cosign
      run: |
        make cosign

    - name: Install cluster + cosign
      uses: sigstore/scaffolding/actions/setup@main

    - name: Install cosigned
      env:
        GIT_HASH: $GITHUB_SHA
        GIT_VERSION: ci
        LDFLAGS: ""
      run: |
        ko apply -Bf config/

        # Wait for the webhook to come up and become Ready
        kubectl rollout status --timeout 5m --namespace cosign-system deployments/webhook

    - name: Create sample image - demoimage
      run: |
        pushd $(mktemp -d)
        go mod init example.com/demo
        cat <<EOF > main.go
        package main
        import "fmt"
        func main() {
          fmt.Println("hello world")
        }
        EOF
        demoimage=`ko publish -B example.com/demo`
        echo "demoimage=$demoimage" >> $GITHUB_ENV
        echo Created image $demoimage
        popd

    - name: Create sample image2 - demoimage2
      run: |
        pushd $(mktemp -d)
        go mod init example.com/demo2
        cat <<EOF > main.go
        package main
        import "fmt"
        func main() {
          fmt.Println("hello world 2")
        }
        EOF
        demoimage2=`ko publish -B example.com/demo2`
        echo "demoimage2=$demoimage2" >> $GITHUB_ENV
        echo Created image $demoimage2
        popd

    - name: Deploy ClusterImagePolicy
      run: |
        kubectl apply -f ./test/testdata/cosigned/e2e/cip.yaml

    - name: Sign demoimage with cosign
      run: |
        ./cosign sign --rekor-url ${{ env.REKOR_URL }} --fulcio-url ${{ env.FULCIO_URL }} --force --allow-insecure-registry ${{ env.demoimage }} --identity-token ${{ env.OIDC_TOKEN }}

    - name: Verify with cosign
      run: |
        SIGSTORE_TRUST_REKOR_API_PUBLIC_KEY=1 COSIGN_EXPERIMENTAL=1 ./cosign verify --rekor-url ${{ env.REKOR_URL }} --allow-insecure-registry ${{ env.demoimage }}

    - name: Deploy jobs and verify signed works, unsigned fails
      run: |
        kubectl create namespace demo
        kubectl label namespace demo cosigned.sigstore.dev/include=true

        echo '::group:: test job success'
        # We signed this above, this should work
        if ! kubectl create -n demo job demo --image=${{ env.demoimage }} ; then
          echo Failed to create Job in namespace without label!
          exit 1
        else
          echo Succcessfully created Job with signed image
        fi
        echo '::endgroup:: test job success'

        echo '::group:: test job rejection'
        # We did not sign this, should fail
        if kubectl create -n demo job demo2 --image=${{ env.demoimage2 }} ; then
          echo Failed to block unsigned Job creation!
          exit 1
        else
          echo Successfully blocked Job creation with unsigned image
        fi
        echo '::endgroup::'

    - name: Collect diagnostics
      if: ${{ failure() }}
      uses: chainguard-dev/actions/kind-diag@84c993eaf02da1c325854fb272a4df9184bd80fc # main
